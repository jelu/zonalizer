#!/usr/bin/env perl

use common::sense;

use AnyEvent::CouchDB;
use AnyEvent::HTTP;
use JSON;
use Getopt::Long;

my $schema = 0;

GetOptions(
    'schema'     => \$schema,
);

my $JSON = JSON->new->utf8;
my $db   = couchdb( $ARGV[0] );

if ( $schema ) {
    foreach ( keys %{ schema() } ) {
        my $doc;

        eval { $doc = req( GET => $_ )->recv; };

        unless ( $@ ) {
            $doc = $JSON->decode( $doc );
            unless ( ref( $doc ) eq 'HASH' and $doc->{_rev} ) {
                die 'Unexpected return or missing data from CouchDB when reading design for ' . $_;
            }
            req( DELETE => $_ . '?rev=' . $doc->{_rev} )->recv;
        }
        undef $@;

        req(
            PUT => $_,
            $JSON->encode(
                {
                    %{ schema()->{$_} },
                    _id => $_
                }
            )
        )->recv;
    }
    exit;
}

my $list = req( GET => '_design/sunburst/_view/all?group=true' )->recv;
$list = $JSON->decode( $list );

my %d = ( name => 'root' );

foreach my $row ( @{ $list->{rows} } ) {
    my $key = $row->{ key };
    $key =~ s/\.$//o;

    my $ref = \%d;
    my $name;
    foreach ( reverse( split( /\./o, $key ) ) ) {
        $name = $_ . '.' . $name;
        unless ( exists $ref->{ children }->{ $_ } ) {
            $ref->{ children }->{ $_ } = {
                name => $name,
                summary => {
                    notice => 0,
                    warning => 0,
                    error => 0,
                    critical => 0
                }
            };
        }
        $ref = $ref->{ children }->{ $_ };
    }

    $ref->{ name } = $row->{ key };
    $ref->{ summary } = $row->{ value };
}

delete $d{ children }->{ arpa };

my @obj = ( \%d );
foreach ( @obj ) {
    if ( exists $_->{ children } ) {
        push( @obj, values $_->{ children } );
        $_->{ children } = [ values %{ $_->{ children } } ];
    }
}

say $JSON->encode( \%d );

exit;

sub req {
    my ( $method, $path, $body ) = @_;
    my $cv = AnyEvent->condvar;

    http_request(
        $method => $db->uri . $path,
        headers => $db->_build_headers(
            {
                $method eq 'POST' || $method eq 'PUT'
                ? ( 'Content-Type' => 'application/json' )
                : (),
            }
        ),
        body => $body,
        sub {
            my ( $body, $headers ) = @_;
            if ( $headers->{Status} >= 200 and $headers->{Status} < 400 ) {
                $cv->send( $body );
            }
            else {
                $cv->croak( $db->uri . $path . ': ' . $headers->{Status} . ' - ' . $headers->{Reason} . ' - ' . $headers->{URL} );
            }
        }
    );

    return $cv;
}

sub schema {
    return {
        '_design/sunburst' => {
            views => {
                all => {
                    map => '
function (doc) {
    if (doc.type == "analyze") {
        emit(doc.fqdn, doc.summary);
    }
}
',
                    reduce => '
function (fqdn, values) {
    var summary = {
        notice: 0,
        warning: 0,
        error: 0,
        critical: 0
    };

    for ( var i = 0; i < values.length; i++ ) {
        summary.notice += values[i].notice;
        summary.warning += values[i].warning;
        summary.error += values[i].error;
        summary.critical += values[i].critical;
    }

    return summary;
}
'
                }
            }
        }
    };
}
